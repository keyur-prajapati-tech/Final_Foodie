@model List<Foodie.Models.customers.CartItemViewModel>

@{
    ViewData["Title"] = "Add To Cart";
    decimal grandTotal = 0;
    string couponCode = ViewBag.CouponCode as string;
    decimal discountAmount = Convert.ToDecimal(Context.Session.GetString("DiscountAmount") ?? "0");
    string successMessage = TempData["successmessage"] as string;
}

@{
    var userName = Context.Session.GetString("UserName");
    var phone = Context.Session.GetString("UserPhone");
    var customerId = Context.Session.GetString("CustomerId");
}

@{
    Layout = "~/Views/Shared/_foodieheader.cshtml";
}

<style>
    .modal {
        background: rgba(0, 0, 0, 0.5);
    }

    .modal-backdrop {
        display: none;
    }

    .coupon-list .card {
        border: 1px solid #ffcc00;
        background: #fff8e1;
        border-radius: 10px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
        margin-bottom: 10px;
    }

    .coupon-list .btn-apply-coupon {
        background-color: #28a745;
        color: white;
    }

        .coupon-list .btn-apply-coupon:hover {
            background-color: #218838;
        }

    #minimumAmountWarning {
        color: #dc3545;
        font-size: 0.9rem;
        margin-top: 5px;
        display: none;
    }

    .cart-summary.low-amount {
        border-left: 4px solid #ffc107;
        background-color: #fff8e1;
    }

    #orderNowBtn:disabled {
        cursor: not-allowed;
        opacity: 0.7;
    }

    .btn-secondary[title]:hover:after {
        content: attr(title);
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        background: #333;
        color: #fff;
        padding: 5px 10px;
        border-radius: 4px;
        white-space: nowrap;
        font-size: 12px;
    }

    .applied-coupon-badge {
        font-size: 0.9rem;
    }
</style>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container mt-4">
    <!-- Success message display -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show">
            @successMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    <div class="row">
        <!-- Left Section -->
        <div class="col-md-8">
            <!-- Logged In User -->
            <div class="card p-3 mb-3">
                <h5>Logged in <span class="text-success">✔</span></h5>
                <p> @userName | @phone</p>
            </div>

            <!-- Delivery Address -->
            <div class="card p-3 mb-3">
                <h5>Add a delivery address</h5>
                <p>You seem to be in the new location</p>
                <button type="button" class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#addressModal">
                    Add New Address
                </button>
            </div>

            <!-- Payment Section -->
            <div class="card p-3">
                <h3 class="text-uppercase">Payment</h3>
                <h4>Select Delivery Address</h4>
                <div class="form-check">
                    <input type="radio" name="address" class="form-check-input address-radio" value="1" data-address-id="1">
                    <label class="form-check-label">123 Main Street, City A</label>
                </div>
                <div class="form-check">
                    <input type="radio" name="address" class="form-check-input address-radio" value="2" data-address-id="2">
                    <label class="form-check-label">456 Market Road, City B</label>
                </div>

                <button id="orderNowBtn" class="btn btn-outline-success btn-md w-100 mt-3">Pay Now</button>
            </div>
        </div>

        <!-- Right Section (Order Summary) -->
        <div class="col-md-4">
            <div class="card p-3">
                @if (Model != null && Model.Any())
                {
                    <h3>Foodie Tasky Food</h3>
                    <p class="h5">Foodie Tasty - The Commoner's Kitchen</p>

                    <!-- Applied Coupon Badge -->
                    <div id="appliedCouponBadge" class="d-flex justify-content-between align-items-center mb-3 @(string.IsNullOrEmpty(couponCode) ? "d-none" : "")">
                        <span class="badge bg-success applied-coupon-badge">
                            <i class="fas fa-tag me-1"></i>
                            <span class="coupon-code">@couponCode</span>
                            <span class="ms-2">-₹<span class="discount-amount">@discountAmount.ToString("0.00")</span></span>
                        </span>
                        <button id="removeCouponBtn" class="btn btn-sm btn-outline-danger">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>

                    @foreach (var item in Model)
                    {
                        <div class="p-2" style="border: 3px solid #000; border-radius: 5px;margin: 3px 3px;">
                            <div class="menu-item cart-item border p-2" data-product-id="@item.menu_id"
                                 data-cart-item-id="@item.cart_item_id"
                                 data-price="@item.amount">

                                <img src="data:image/png;base64,@Convert.ToBase64String(item.menu_img)" alt="@item.menu_name" style="width:350px; height:200px; object-fit:contain;" />

                                <div>
                                    <input type="hidden" class="cart-item-id" value="@item.cart_item_id" />
                                    <input type="hidden" id="customerId" value="@item.customer_id" />

                                    <h4>Food Name : <strong>@item.menu_name</strong></h4>
                                    <h4>Price: <strong> ₹<span class="unit-price">@item.amount</span></strong></h4>

                                    <div class="d-flex justify-content-between gap-2 align-items-center" style="border-top: 3px solid #333;">
                                        <div class="mt-2">
                                            <button class="btn btn-outline-danger qty-minus">-</button>
                                            <span class="qty">1</span>
                                            <button class="btn btn-outline-success qty-plus">+</button>
                                        </div>
                                        <div>
                                            <button class="btn btn-outline-danger btn-remove">REMOVE</button>
                                        </div>
                                    </div>

                                    <div class="d-flex justify-content-between" style="margin-top: 2px; margin-bottom: 2px; border-top: 3px solid #000;">
                                        <h5>Total Amount :- </h5>
                                        <span class="item-total text-primary fw-bold ms-3">₹@item.amount</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Order Summary -->
                    <div class="d-flex justify-content-between mt-3 p-2" style="border-top: 3px solid #000;">
                        <h4>Subtotal:</h4>
                        <h4 class="text-primary fw-bold">₹<span id="subtotal">0</span></h4>
                    </div>
                    <div class="d-flex justify-content-between p-2">
                        <h5>Discount:</h5>
                        <h5 class="text-danger fw-bold">-₹<span id="discount">@discountAmount.ToString("0.00")</span></h5>
                    </div>
                    <div class="d-flex justify-content-between p-2 border-top border-dark">
                        <h4>Total Payable:</h4>
                        <h4 class="text-success fw-bold">₹<span id="final-total">0</span></h4>
                    </div>

                    <!-- Minimum amount warning -->
                    <div id="minimumAmountWarning" class="payment-error text-danger text-center mt-2">
                        <i class="fas fa-exclamation-circle"></i> Minimum order amount is ₹1. Please add more items.
                    </div>

                    <input type="hidden" id="razor-amount" value="0" />

                    <a asp-controller="Restaurantdeatil" asp-action="Restuarantinfo" class="float-end">Add More Item</a>
                    <hr>
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="noContactDelivery">
                        <label class="form-check-label" for="noContactDelivery">
                            Opt-in for No-contact Delivery
                        </label>
                    </div>
                    <hr>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#couponModal">
                        <i class="fas fa-tag me-1"></i> Apply Coupon
                    </button>
                    <div class="alert alert-light mt-2">
                        <h6>Review your order and address details to avoid cancellations</h6>
                        <p>Note: This order is non-refundable if cancelled.</p>
                        <a href="#" class="text-danger">Read policy</a>
                    </div>
                }
                else
                {
                    <!-- Empty cart content -->
                    <div class="text-center py-5">
                        <i class="fas fa-shopping-cart fa-4x text-muted mb-4"></i>
                        <h3>Your cart is empty</h3>
                        <p class="text-muted">You haven't added any delicious food yet!</p>

                        <div class="mt-4">
                            <a asp-controller="Restaurantdeatil" asp-action="Restuarantinfo"
                               class="btn btn-primary btn-lg">
                                <i class="fas fa-utensils"></i> Browse Restaurants
                            </a>
                        </div>

                            <div class="mt-3">
                            <a asp-controller="displayCart" asp-action="CustomerOrderhistory" class="btn btn-outline-secondary w-100">
                                    <i class="fas fa-history"></i> View Order History
                                </a>
                            </div>
                    </div>
                }
            </div>

            <!-- Order History button when cart has items -->
            @if (Model != null && Model.Any())
            {
                <div class="mt-3">
                    <a asp-controller="displayCart" asp-action="CustomerOrderhistory" class="btn btn-info w-100">
                        <i class="fas fa-history"></i> View Order History
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Coupon Modal -->
<div class="modal fade" id="couponModal" tabindex="-1" aria-labelledby="couponModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="couponModalLabel">Available Coupons</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="input-group mb-3">
                    <input type="text" id="couponCodeInput" class="form-control" placeholder="Enter coupon code">
                    <button id="applyCouponBtn" class="btn btn-warning">
                        <i class="fas fa-check"></i> Apply
                    </button>
                </div>

                <!-- Error message container -->
                <div id="couponError" class="alert alert-danger d-none mb-3"></div>

                <hr>
                <h5>Available Coupons</h5>
                <div class="coupon-list">
                    <div id="couponListContainer">
                        <div class="text-center py-4">
                            <span class="spinner-border"></span> Loading coupons...
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Address Modal -->
<div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="addressForm" method="post" asp-action="Address">
                <div class="modal-header">
                    <h5 class="modal-title">Save delivery address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="map" style="width: 100%; height: 300px; border-radius: 10px; margin-bottom: 15px;"></div>
                    <input type="hidden" name="latitude" id="latitude" />
                    <input type="hidden" name="longitude" id="longitude" />
                    <input type="hidden" name="address" id="address" />

                    <div class="mb-3">
                        <label class="form-label">Country</label>
                        <input type="text" name="CountryName" class="form-control" value="India" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">State</label>
                        <select name="StateId" id="state" class="form-control">
                            <option value="">-- Select State --</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">District</label>
                        <select name="DistrictId" id="district" class="form-control">
                            <option value="">-- Select District --</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">City</label>
                        <select name="CityId" id="city" class="form-control">
                            <option value="">-- Select City --</option>
                        </select>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Door</label>
                            <input type="text" id="door_no" name="door_no" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Area</label>
                            <input type="text" id="area" name="area" class="form-control" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Landmark</label>
                        <input type="text" id="landmark" name="landmark" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Address Type</label><br />
                        <div class="btn-group" role="group">
                            <input type="radio" class="btn-check" name="addresses_type" id="home" value="home" checked />
                            <label class="btn btn-outline-primary" for="home">🏠 Home</label>
                            <input type="radio" class="btn-check" name="addresses_type" id="work" value="work" />
                            <label class="btn btn-outline-primary" for="work">💼 Work</label>
                            <input type="radio" class="btn-check" name="addresses_type" id="other" value="other" />
                            <label class="btn btn-outline-primary" for="other">📍 Other</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary w-100">SAVE ADDRESS & PROCEED</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Global variables
    let selectedAddressId = null;
    let map;
    let marker;

    // Initialize map when modal is shown
    $('#addressModal').on('shown.bs.modal', function() {
        if (!map) {
            map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [72.8311, 21.1702],
                zoom: 10
            });

            map.addControl(new mapboxgl.NavigationControl());

            map.on('click', function(e) {
                const lng = e.lngLat.lng;
                const lat = e.lngLat.lat;

                $('#latitude').val(lat);
                $('#longitude').val(lng);

                if (marker) marker.remove();

                marker = new mapboxgl.Marker({ draggable: true })
                    .setLngLat([lng, lat])
                    .addTo(map);

                marker.on('dragend', function() {
                    const lngLat = marker.getLngLat();
                    $('#latitude').val(lngLat.lat);
                    $('#longitude').val(lngLat.lng);
                });
            });
        }
    });

    // Document ready function
    $(document).ready(function() {
        // Calculate totals on page load
        calculateTotals();
        updateCartUI();
        checkCouponStatus();

        // Address selection
        $(document).on('change', '.address-radio', function() {
            selectedAddressId = $(this).data('address-id');
            console.log("Selected Address ID:", selectedAddressId);
        });

        // Payment button click
        $(document).on('click', '#orderNowBtn', function() {
            if (!selectedAddressId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Address Required',
                    text: 'Please select a delivery address.',
                    confirmButtonColor: '#3085d6',
                });
                return;
            }
            makePayment(selectedAddressId);
        });

        // Quantity controls
        $(document).on('click', '.qty-plus', function() {
            const qtyEl = $(this).siblings('.qty');
            const cartItemId = $(this).closest('.cart-item').data('cart-item-id');
            const newQty = parseInt(qtyEl.text()) + 1;

            qtyEl.text(newQty);
            updateCartItem(cartItemId, newQty);
        });

        $(document).on('click', '.qty-minus', function() {
            const qtyEl = $(this).siblings('.qty');
            const cartItemId = $(this).closest('.cart-item').data('cart-item-id');
            let newQty = parseInt(qtyEl.text()) - 1;
            if (newQty < 1) newQty = 1;

            qtyEl.text(newQty);
            updateCartItem(cartItemId, newQty);
        });

        // Remove item
        $(document).on('click', '.btn-remove', function() {
            const cartItemId = $(this).closest('.cart-item').data('cart-item-id');
            removeCartItem(cartItemId);
        });

        // Load states
        $.ajax({
            url: '/displayCart/GetAllStates',
            type: 'GET',
            success: function(states) {
                $('#state').empty().append('<option value="">-- Select State --</option>');
                $.each(states, function(i, state) {
                    $('#state').append(`<option value="${state.stateId}">${state.stateName}</option>`);
                });
            }
        });

        // State → District
        $('#state').change(function() {
            const stateId = $(this).val();
            $.ajax({
                url: '/displayCart/GetDistricts',
                type: 'GET',
                data: { stateId: stateId },
                success: function(districts) {
                    $('#district').empty().append('<option value="">-- Select District --</option>');
                    $.each(districts, function(i, district) {
                        $('#district').append(`<option value="${district.districtId}">${district.disrictName}</option>`);
                    });
                }
            });
        });

        // District → City
        $('#district').change(function() {
            const districtId = $(this).val();
            $.ajax({
                url: '/displayCart/GetCities',
                type: 'GET',
                data: { districtId: districtId },
                success: function(cities) {
                    $('#city').empty().append('<option value="">-- Select City --</option>');
                    $.each(cities, function(i, city) {
                        $('#city').append(`<option value="${city.cityId}">${city.cityName}</option>`);
                    });
                }
            });
        });

        // Address form submission
        $('#addressForm').on('submit', function(e) {
            e.preventDefault();
            const form = $(this);
            const formData = form.serializeArray();

            formData.push(
                { name: "latitude", value: $('#latitude').val() },
                { name: "longitude", value: $('#longitude').val() },
                { name: "address", value: $('#address').val() }
            );

            $.ajax({
                type: "POST",
                url: form.attr('action'),
                data: $.param(formData),
                success: function(response) {
                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Address Saved',
                            text: response.message,
                            confirmButtonColor: '#3085d6',
                        });
                        $('#addressModal').modal('hide');
                        form.trigger('reset');
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message,
                            confirmButtonColor: '#3085d6',
                        });
                    }
                },
                error: function() {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Something went wrong while saving address.',
                        confirmButtonColor: '#3085d6',
                    });
                }
            });
        });

        // Coupon modal events
        $('#couponModal').on('shown.bs.modal', function() {
            loadCoupons();
        });

        // Apply coupon via input field
        $('#applyCouponBtn').click(function() {
            const couponCode = $('#couponCodeInput').val().trim();
            if (couponCode) {
                applyCoupon(couponCode);
            } else {
                showErrorMessage('Please enter a coupon code');
            }
        });

        // Apply coupon when pressing Enter
        $('#couponCodeInput').keypress(function(e) {
            if (e.which === 13) {
                e.preventDefault();
                $('#applyCouponBtn').click();
            }
        });

        // Update the coupon list item click handler
        $(document).on('click', '.apply-coupon-btn', function() {
            const couponCode = $(this).data('coupon-code');
            $('#couponCodeInput').val(couponCode);
            $('#couponError').addClass('d-none');
            applyCoupon(couponCode);
        });

        // Remove coupon
        $('#removeCouponBtn').click(function() {
            removeCoupon();
        });
    });

    // ========== COUPON FUNCTIONS ========== //

    function loadCoupons() {
        $.ajax({
            url: '/displayCart/GetAllCoupons',
            type: 'GET',
            beforeSend: function() {
                $('#couponListContainer').html('<div class="text-center py-4"><span class="spinner-border"></span> Loading coupons...</div>');
            },
            success: function(response) {
                $('#couponListContainer').html(response);
                // Initialize tooltips
                $('[data-bs-toggle="tooltip"]').tooltip();
            },
            error: function() {
                $('#couponListContainer').html('<div class="alert alert-danger">Failed to load coupons. Please try again.</div>');
            }
        });
    }

    function applyCoupon(couponCode) {
        const subtotal = parseFloat($('#subtotal').text());

        // Hide any previous errors
        $('#couponError').addClass('d-none');

        // Validate coupon code
        if (!couponCode || couponCode.trim() === '') {
            showCouponError('Please enter a coupon code');
            return;
        }

        // Validate cart total
        if (subtotal <= 0) {
            showCouponError('Cannot apply coupon to empty cart');
            return;
        }

        $.ajax({
            url: '/displayCart/ApplyCoupon',
            type: 'POST',
            data: { couponCode: couponCode },
            beforeSend: function() {
                $('#applyCouponBtn').prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Applying...');
            },
            success: function(response) {
                $('#applyCouponBtn').prop('disabled', false).html('<i class="fas fa-check"></i> Apply');

                if (response.success) {
                    // Update UI
                    $('#discount').text(response.discountAmount.toFixed(2));
                    $('#final-total').text(response.finalTotal.toFixed(2));
                    $('#razor-amount').val(response.finalTotal);

                    // Show applied coupon
                    $('#appliedCouponBadge').removeClass('d-none')
                        .find('.coupon-code').text(couponCode)
                        .end().find('.discount-amount').text(response.discountAmount.toFixed(2));

                    // Close modal and show success
                    $('#couponModal').modal('hide');
                    showSuccessMessage(response.message);

                    // Clear input field
                    $('#couponCodeInput').val('');
                } else {
                    showCouponError(response.message || 'Failed to apply coupon');
                }
            },
            error: function(xhr) {
                $('#applyCouponBtn').prop('disabled', false).html('<i class="fas fa-check"></i> Apply');
                let errorMsg = 'Error applying coupon';
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMsg = xhr.responseJSON.message;
                }
                showCouponError(errorMsg);
            }
        });
    }
    // Helper function to show coupon errors
    function showCouponError(message) {
        const $errorContainer = $('#couponError');
        $errorContainer.text(message).removeClass('d-none');
        $errorContainer[0].scrollIntoView({ behavior: 'smooth' });
    }


    function removeCoupon() {
        const currentDiscount = parseFloat($('#discount').text());
        if (currentDiscount <= 0) {
            showErrorMessage('No coupon applied to remove');
            return;
        }

        Swal.fire({
            title: 'Remove Coupon?',
            text: 'Are you sure you want to remove the applied coupon?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/displayCart/RemoveCoupon',
                    type: 'POST',
                    beforeSend: function() {
                        $('#removeCouponBtn').prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span>');
                    },
                    success: function(response) {
                        $('#removeCouponBtn').prop('disabled', false).html('<i class="fas fa-times"></i>');

                        if (response.success) {
                            // Update UI
                            const subtotal = parseFloat($('#subtotal').text());
                            $('#discount').text('0.00');
                            $('#final-total').text(subtotal.toFixed(2));
                            $('#razor-amount').val(subtotal);

                            // Hide applied coupon
                            $('#appliedCouponBadge').addClass('d-none');

                            showSuccessMessage(response.message);
                        } else {
                            showErrorMessage(response.message);
                        }
                    },
                    error: function() {
                        $('#removeCouponBtn').prop('disabled', false).html('<i class="fas fa-times"></i>');
                        showErrorMessage('Error removing coupon');
                    }
                });
            }
        });
    }

    function checkCouponStatus() {
        $.ajax({
            url: '/displayCart/GetCurrentCouponStatus',
            type: 'GET',
            success: function(data) {
                if (data.hasCoupon) {
                    $('#appliedCouponBadge').removeClass('d-none')
                        .find('.coupon-code').text(data.code)
                        .end().find('.discount-amount').text(data.discount.toFixed(2));

                    // Update totals
                    $('#discount').text(data.discount.toFixed(2));
                    $('#final-total').text((parseFloat($('#subtotal').text()) - data.discount).toFixed(2));
                    $('#razor-amount').val((parseFloat($('#subtotal').text()) - data.discount).toFixed(2));
                }
            },
            error: function() {
                console.error('Failed to check coupon status');
            }
        });
    }

    // ========== CART FUNCTIONS ========== //

    function calculateTotals() {
        let subtotal = 0;

        $('.menu-item').each(function() {
            const price = parseFloat($(this).data('price'));
            const qty = parseInt($(this).find('.qty').text());
            const total = price * qty;

            $(this).find('.item-total').text('₹' + total.toFixed(2));
            subtotal += total;
        });

        $('#subtotal').text(subtotal.toFixed(2));

        // Check if there's an applied coupon
        if (!$('#appliedCouponBadge').hasClass('d-none')) {
            const discount = parseFloat($('#discount').text());
            $('#final-total').text((subtotal - discount).toFixed(2));
            $('#razor-amount').val((subtotal - discount).toFixed(2));
        } else {
            $('#final-total').text(subtotal.toFixed(2));
            $('#razor-amount').val(subtotal.toFixed(2));
        }

        updateCartUI();
    }

    function updateCartUI() {
        const finalTotal = parseFloat($('#final-total').text()) || 0;
        const $warning = $('#minimumAmountWarning');
        const $summary = $('.card.p-3');
        const $payBtn = $('#orderNowBtn');

        if (finalTotal < 1) {
            $warning.show();
            $summary.addClass('low-amount');
            $payBtn.prop('disabled', true)
                   .removeClass('btn-outline-success')
                   .addClass('btn-secondary')
                   .attr('title', 'Minimum order amount is ₹1');
        } else {
            $warning.hide();
            $summary.removeClass('low-amount');
            $payBtn.prop('disabled', false)
                   .addClass('btn-outline-success')
                   .removeClass('btn-secondary')
                   .removeAttr('title');
        }
    }

    function updateCartItem(cartItemId, quantity) {
        $.ajax({
            url: '/displayCart/UpdateCartItemQuantity',
            method: 'POST',
            data: {
                cartItemId: cartItemId,
                quantity: quantity
            },
            success: function(response) {
                if (response.success) {
                    calculateTotals();
                } else {
                    showErrorMessage('Failed to update quantity');
                }
            },
            error: function() {
                showErrorMessage('Error updating item quantity');
            }
        });
    }

    function removeCartItem(cartItemId) {
        Swal.fire({
            title: 'Remove Item',
            text: 'Are you sure you want to remove this item?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/displayCart/RemoveCartItem',
                    method: 'POST',
                    data: { cartItemId: cartItemId },
                    success: function(response) {
                        if (response.success) {
                            $('.cart-item[data-cart-item-id="' + cartItemId + '"]').closest('.p-2').remove();
                            calculateTotals();

                            // If cart is now empty, reload the page
                            if ($('.cart-item').length === 0) {
                                location.reload();
                            }
                        } else {
                            showErrorMessage('Failed to remove item');
                        }
                    },
                    error: function() {
                        showErrorMessage('Error removing item');
                    }
                });
            }
        });
    }

    // ========== PAYMENT FUNCTIONS ========== //

    function makePayment(addressId) {
        const finalTotal = parseFloat($('#final-total').text());
        const customerId = $('#customerId').val();

        // Show loading state
        const $payBtn = $('#orderNowBtn');
        $payBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Processing...');

        // Validate minimum amount
        if (finalTotal < 1) {
            $payBtn.prop('disabled', false).text('Pay Now');
            Swal.fire({
                icon: 'error',
                title: 'Minimum Order Amount',
                text: 'Order amount must be at least ₹1. Please add more items to your cart.',
                confirmButtonColor: '#3085d6',
            });
            return;
        }

        const orderItems = [];
        $('.cart-item').each(function() {
            const menu_id = $(this).data('product-id');
            const quantity = parseInt($(this).find('.qty').text());
            const price = parseFloat($(this).data('price'));

            orderItems.push({
                menu_id: menu_id,
                quantity: quantity,
                listprice: price,
                discount: 0
            });
        });

        fetch('/displayCart/InitiateOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            body: JSON.stringify({
                amount: finalTotal,
                OrderItems: orderItems,
                address_id: addressId,
                CustomerId: customerId
            })
        })
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
        })
        .then(data => {
            $payBtn.prop('disabled', false).text('Pay Now');

            if (data.minimumAmountError) {
                Swal.fire({
                    icon: 'error',
                    title: 'Order Too Small',
                    text: data.message,
                    confirmButtonColor: '#3085d6',
                });
                return;
            }

            if (!data.success) {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Error',
                    text: data.message || 'Failed to initiate payment',
                    confirmButtonColor: '#3085d6',
                });
                return;
            }

            const options = {
                key: "rzp_test_uIxZbgotqYKcAK",
                amount: data.amount,
                currency: "INR",
                name: "Foodie Order",
                description: "Order Payment",
                order_id: data.orderId,
                handler: function(response) {
                    verifyPayment(response, finalTotal, addressId, customerId);
                },
                prefill: {
                    name: "@userName",
                    contact: "@phone",
                    email: ""
                },
                theme: {
                    color: "#3399cc"
                },
                modal: {
                    ondismiss: function() {
                        $payBtn.prop('disabled', false).text('Pay Now');
                    }
                }
            };

            const rzp1 = new Razorpay(options);
            rzp1.open();
        })
        .catch(error => {
            console.error('Error:', error);
            $payBtn.prop('disabled', false).text('Pay Now');
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred. Please try again.',
                confirmButtonColor: '#3085d6',
            });
        });
    }

    function verifyPayment(response, amount, addressId, customerId) {
        fetch('/displayCart/Success', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            body: JSON.stringify({
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature,
                amount: amount,
                addressId: addressId,
                customerId: customerId
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Payment Successful',
                    text: 'Your order has been placed successfully!',
                    confirmButtonColor: '#3085d6',
                }).then(() => {
                    window.location.href = '/displayCart/ThankYou';
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Verification Failed',
                    text: data.message || 'Could not verify your payment',
                    confirmButtonColor: '#3085d6',
                });
            }
        });
    }

     function showSuccessMessage(message) {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: message,
            confirmButtonColor: '#3085d6',
        });
    }

    function showErrorMessage(message) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: message,
            confirmButtonColor: '#3085d6',
        });
    }
</script>
