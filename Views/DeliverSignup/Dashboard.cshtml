@model Foodie.Models.DeliveryPartner.DashViewModel
@{
    ViewData["Title"] = "Delivery Partner Dashboard";
    Layout = ViewBag.Layout ?? "_DeliveryPartnerLayout";
    // Get user data from session
    var fullName = Context.Session.GetString("FullName");
    var onlineStatus = Context.Session.GetInt32("isOnline") ?? 0;
    var currentRequestStatus = ViewBag.RequestStatus as string ?? "Pending";
    
    // Dynamic coordinates passed from the controller
    var restaurantLatitude = Model.RestaurantLat; // e.g. "28.6270"
    var restaurantLongitude = Model.RestaurantLng; // e.g. "77.2167"
    var customerLatitude = Model.CustomerLat;  // e.g. "28.6353"
    var customerLongitude = Model.CustomerLng;  // e.g. "77.2250"
}

<!-- Bootstrap 5 CSS and Chart.js -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Mapbox CSS & JS -->
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
<!-- Mapbox Directions plugin -->
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.css" type="text/css" />

<style>
    body {
    background-color: #f1f3f5;
    font-family: 'Segoe UI', sans-serif;
    }

    .dashboard-header {
    text-align: center;
    margin-bottom: 30px;
    }

    .card-metric {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-radius: 16px;
    transition: transform 0.3s ease;
    }

    .card-metric:hover {
    transform: translateY(-5px);
    }

    .map-container,
    .chart-container {
    border-radius: 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    margin-top: 30px;
    }

    .status-badge {
    padding: 6px 10px;
    border-radius: 5px;
    font-size: 0.9rem;
    font-weight: bold;
    }

    .status-pending {
    background-color: #ffc107;
    color: #212529;
    }

    .status-delivered {
    background-color: #28a745;
    color: white;
    }

    .status-out-for-delivery {
    background-color: #17a2b8;
    color: white;
    }
</style>

<div class="container py-4">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <h2 class="fw-bold">Welcome, @fullName 👋</h2>
        @if (onlineStatus == 0)
        {
            <div class="alert alert-warning">
                <p class="mb-0"><strong>You are currently offline.</strong> Go online to view your earnings, delivery routes, and order statistics.</p>
            </div>
        }
        else
        {
            <p class="text-muted">Here's your delivery performance today.</p>
        }
    </div>

    <!-- Summary Cards -->
    <div class="row g-4">
        <div class="col-md-6 col-xl-3">
            <div class="card card-metric border-0 text-center p-3">
                <h5 class="text-muted">Orders Delivered Today</h5>
                <h2 class="fw-bold text-primary">@Model.OrdersDelivered</h2>
            </div>
        </div>
        @if (onlineStatus == 1)
        {
            <div class="col-md-6 col-xl-3">
                <div class="card card-metric border-0 text-center p-3">
                    <h5 class="text-muted">Today's Earnings</h5>
                    <h2 class="fw-bold text-success">₹ @Model.TotalEarnings.ToString("F2")</h2>
                </div>
            </div>
        }
    </div>

    @if (onlineStatus == 1)
    {
        <!-- Map Section - Only shown when online -->
        <div class="map-container bg-white p-3 mt-4">
            <h5 class="mb-3">📍 Your Delivery Route</h5>
            <div id="map" style="height: 500px; width: 100%; border-radius: 12px;"></div>
        </div>

        <!-- Charts Section - Only shown when online -->
        <div class="row g-4 mt-4">
            <div class="col-md-6">
                <div class="card chart-container border-0 p-3">
                    <h5 class="mb-3">📊 Weekly Earnings</h5>
                    <canvas id="earningsChart" height="200"></canvas>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card chart-container border-0 p-3">
                    <h5 class="mb-3">🧾 Order Status Summary</h5>
                    <canvas id="ordersPieChart" height="200"></canvas>
                </div>
            </div>
        </div>
    }
</div>

@if (onlineStatus == 1)
{
    <!-- Chart Initialization - Only include when online -->
    <script>
        // Chart data passed from the server via DashboardViewModel
        const weeklyLabels = @Html.Raw(Json.Serialize(Model.WeeklyLabels));
        const weeklyData = @Html.Raw(Json.Serialize(Model.WeeklyEarnings));
        const statusLabels = @Html.Raw(Json.Serialize(Model.OrderStatusLabels));
        const statusData = @Html.Raw(Json.Serialize(Model.OrderStatusCounts));

        // Initialize Weekly Earnings Chart
        new Chart(document.getElementById("earningsChart"), {
            type: "bar",
            data: {
                labels: weeklyLabels,
                datasets: [{
                    label: "Earnings (₹)",
                    data: weeklyData,
                    backgroundColor: "#0d6efd",
                    borderRadius: 6
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: ctx => `₹ ${ctx.parsed.y.toFixed(2)}`
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: value => '₹' + value
                        }
                    }
                }
            }
        });

        // Initialize Order Status Pie Chart
        new Chart(document.getElementById("ordersPieChart"), {
            type: "pie",
            data: {
                labels: statusLabels,
                datasets: [{
                    data: statusData,
                    backgroundColor: [
                        "#28a745", // Delivered
                        "#ffc107", // In Transit
                        "#dc3545", // Cancelled
                        "#17a2b8"  // Others
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: "bottom" }
                }
            }
        });
    </script>

    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoicmlzaGk4MTAyIiwiYSI6ImNtOTFpbXpjeDAxZGwybHNjdjljdnlpZ2UifQ.lwfPOwA0QilljmyDYiUV6A';

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(async position => {
                const userLat = position.coords.latitude;
                const userLng = position.coords.longitude;
                const deliveryPartner = [userLng, userLat]; 

                const restaurantLat = parseFloat('@restaurantLatitude' || '21.1903');
                const restaurantLng = parseFloat('@restaurantLongitude' || '72.8644');
                const customerLat = parseFloat('@customerLatitude' || '21.1521');
                const customerLng = parseFloat('@customerLongitude' || '72.8717');

                const restaurant = [restaurantLng, restaurantLat];
                const customer = [customerLng, customerLat];

                const map = new mapboxgl.Map({
                    container: 'map',
                    style: 'mapbox://styles/mapbox/streets-v11',
                    center: deliveryPartner,
                    zoom: 13
                });

                // Partner marker
                new mapboxgl.Marker({ color: 'blue' })
                    .setLngLat(deliveryPartner)
                    .setPopup(new mapboxgl.Popup().setText("You are here"))
                    .addTo(map);

                // Restaurant marker
                new mapboxgl.Marker({ color: 'red' })
                    .setLngLat(restaurant)
                    .setPopup(new mapboxgl.Popup().setText("Restaurant"))
                    .addTo(map);

                // Customer marker
                new mapboxgl.Marker({ color: 'green' })
                    .setLngLat(customer)
                    .setPopup(new mapboxgl.Popup().setText("Customer"))
                    .addTo(map);

                // Draw route
                async function drawRoute() {
                    const query = `https://api.mapbox.com/directions/v5/mapbox/driving/${deliveryPartner.join(',')};${restaurant.join(',')};${customer.join(',')}?geometries=geojson&access_token=${mapboxgl.accessToken}`;
                    try {
                        const response = await fetch(query);
                        const data = await response.json();
                        if (data.routes && data.routes.length > 0) {
                            const route = data.routes[0].geometry;
                            map.addSource('route', {
                                type: 'geojson',
                                data: {
                                    type: 'Feature',
                                    properties: {},
                                    geometry: route
                                }
                            });
                            map.addLayer({
                                id: 'route',
                                type: 'line',
                                source: 'route',
                                layout: {
                                    'line-join': 'round',
                                    'line-cap': 'round'
                                },
                                paint: {
                                    'line-color': '#007bff',
                                    'line-width': 5
                                }
                            });
                        }
                    } catch (error) {
                        console.error('Error drawing route:', error);
                    }
                }

                map.on('load', drawRoute);

                // Fetch available restaurants
                fetch('/d/GetAvailableRestaurants')
                    .then(response => response.json())
                    .then(restaurants => {
                        restaurants.forEach(rest => {
                            const lat = parseFloat(rest.restaurant_lat);
                            const lng = parseFloat(rest.restaurant_lag);

                            new mapboxgl.Marker({ color: 'red' })
                                .setLngLat([lng, lat])
                                .setPopup(new mapboxgl.Popup().setHTML(`
                                    <strong>${rest.restaurant_name}</strong><br/>
                                    <button class="btn btn-sm btn-success mt-2" onclick="acceptOrderFromMap(${rest.restaurant_id})">
                                        ✅ Accept Order
                                    </button>
                                `))
                                .addTo(map);
                        });
                    });

                // Accept order function
                window.acceptOrderFromMap = function (restaurantId) {
                    if (confirm("Are you sure you want to accept this order?")) {
                        fetch('/DeliverSignup/AssignOrder?restaurantId=' + restaurantId, {
                            method: 'POST'
                        }).then(res => {
                            if (res.ok) {
                                alert("✅ Order Assigned Successfully!");
                                window.location.reload();
                            } else {
                                alert("❌ Could not assign order.");
                            }
                        });
                    }
                };

            }, (error) => {
                console.error("Geolocation Error:", error);
                showLocationError(`Unable to fetch your location: ${error.message}`);
            });
        } else {
            showLocationError("Geolocation is not supported by your browser.");
        }

        // Helper function to show location errors
        function showLocationError(message) {
            const mapContainer = document.getElementById('map');
            if (mapContainer) {
                mapContainer.innerHTML = `<div class="alert alert-danger">${message}</div>`;
            } else {
                console.error(message);
            }
        }
    </script>
}