@{
    Layout = "~/Views/Shared/_RestaurantLayout.cshtml";
}
@model List<Foodie.Models.customers.tbl_ratings>

<style>
    :root {
        --primary-color: #FF6B6B;
        --secondary-color: #4ECDC4;
        --dark-color: #292F36;
        --light-color: #F7FFF7;
        --accent-color: #FFE66D;
        --text-color: #333;
        --text-light: #777;
        --border-radius: 12px;
        --box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    .ratings-container {
        max-width: 1150px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .section-title {
        font-family: 'Poppins', sans-serif;
        font-weight: 600;
        color: var(--dark-color);
        text-align: center;
        margin-bottom: 2.5rem;
        position: relative;
        font-size: 2rem;
        animation: fadeInDown 0.6s ease-out;
    }

        .section-title:after {
            content: '';
            display: block;
            width: 80px;
            height: 4px;
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            margin: 0.5rem auto 0;
            border-radius: 2px;
            transform-origin: center;
            transition: transform 0.4s ease;
        }

        .section-title:hover:after {
            transform: scaleX(1.2);
        }

    .rating-card {
        display: flex;
        background-color: white;
        border-radius: var(--border-radius);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: var(--box-shadow);
        transition: var(--transition);
        position: relative;
        overflow: hidden;
        animation: fadeInUp 0.5s ease-out;
        animation-fill-mode: both;
    }

        .rating-card:nth-child(odd) {
            animation-delay: 0.1s;
        }

        .rating-card:nth-child(even) {
            animation-delay: 0.2s;
        }

        .rating-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
        }

        .rating-card:before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(to bottom, var(--primary-color), var(--secondary-color));
            transition: width 0.3s ease;
        }

        .rating-card:hover:before {
            width: 6px;
        }

    .rating-image-container {
        flex-shrink: 0;
        margin-right: 1.5rem;
        position: relative;
        transition: transform 0.3s ease;
    }

    .rating-card:hover .rating-image-container {
        transform: scale(1.05);
    }

    .rating-image {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid white;
        box-shadow: 0 3px 15px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .rating-image:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        }

    .rating-content {
        flex-grow: 1;
        position: relative;
    }

    .rating-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
        flex-wrap: wrap;
    }

    .rating-name {
        font-weight: 600;
        font-size: 1.1rem;
        color: var(--dark-color);
        margin-right: 1rem;
        position: relative;
        display: inline-block;
    }

        .rating-name:after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary-color);
            transition: width 0.3s ease;
        }

    .rating-card:hover .rating-name:after {
        width: 100%;
    }

    .rating-time {
        font-size: 0.85rem;
        color: var(--text-light);
        background: #f5f5f5;
        padding: 0.25rem 0.5rem;
        border-radius: 20px;
        transition: all 0.3s ease;
    }

    .rating-card:hover .rating-time {
        background: var(--primary-color);
        color: white;
    }

    .rating-stars {
        color: var(--accent-color);
        font-size: 1rem;
        margin: 0.5rem 0;
        letter-spacing: 1px;
    }

        .rating-stars .star {
            cursor: pointer;
            transition: transform 0.2s ease;
        }

            .rating-stars .star:hover {
                transform: scale(1.3);
            }

    .rating-restaurant {
        display: inline-block;
        font-size: 0.9rem;
        color: var(--text-light);
        margin-bottom: 0.5rem;
        background: #f8f9fa;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        transition: all 0.3s ease;
    }

    .rating-card:hover .rating-restaurant {
        background: var(--secondary-color);
        color: white;
    }

    .rating-restaurant strong {
        color: var(--dark-color);
        font-weight: 500;
        transition: color 0.3s ease;
    }

    .rating-card:hover .rating-restaurant strong {
        color: white;
    }

    .rating-description {
        font-size: 0.95rem;
        color: var(--text-color);
        line-height: 1.6;
        margin-top: 0.75rem;
        padding: 0.75rem;
        background: #fafafa;
        border-radius: 8px;
        border-left: 3px solid var(--secondary-color);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .rating-description:before {
            content: '"';
            position: absolute;
            top: 5px;
            left: 5px;
            font-size: 3rem;
            color: rgba(0, 0, 0, 0.05);
            font-family: serif;
            line-height: 1;
        }

    .rating-card:hover .rating-description {
        background: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        animation: fadeIn 0.8s ease-out;
    }

        .empty-state i {
            font-size: 3rem;
            color: #ddd;
            margin-bottom: 1rem;
            transition: transform 0.5s ease, color 0.3s ease;
        }

        .empty-state:hover i {
            transform: scale(1.2);
            color: var(--primary-color);
        }

        .empty-state p {
            color: var(--text-light);
            font-size: 1.1rem;
            margin-bottom: 0;
            transition: color 0.3s ease;
        }

        .empty-state:hover p {
            color: var(--dark-color);
        }

    .action-buttons {
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
        opacity: 0;
        transform: translateY(10px);
        transition: all 0.3s ease;
    }

    .rating-card:hover .action-buttons {
        opacity: 1;
        transform: translateY(0);
    }

    .action-btn {
        border: none;
        background: #f0f0f0;
        color: var(--text-light);
        padding: 0.4rem 0.8rem;
        border-radius: 20px;
        margin-left: 0.5rem;
        font-size: 0.8rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .action-btn:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }

        .action-btn.reply {
            background: var(--secondary-color);
            color: white;
        }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@media (max-width: 768px) {
        .rating-card {
            flex-direction: column;
        }

        .rating-image-container {
            margin-right: 0;
            margin-bottom: 1rem;
            align-self: center;
        }

        .rating-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .rating-time {
            margin-top: 0.5rem;
            align-self: flex-end;
        }

        .action-buttons {
            justify-content: center;
            opacity: 1;
            transform: none;
        }
    }
</style>

<div class="ratings-container">
    <h2 class="section-title">Customer Ratings</h2>

    @if (Model != null && Model.Count > 0)
    {
        foreach (var item in Model)
        {
            <div class="rating-card">
                <!-- Profile Image -->
                <div class="rating-image-container">
                    <img src="@(item.image != null ? $"data:image/png;base64,{Convert.ToBase64String(item.image)}" : "/Uploads/userlogo.jpeg")"
                         alt="User Image"
                         class="rating-image" />
                </div>

                <!-- Review Content -->
                <div class="rating-content">
                    <div class="rating-header">
                        <span class="rating-name">@item.customer_name</span>
                        <span class="rating-time relative-time" data-date="@item.craetedAt.ToString("o")"></span>
                    </div>

                    <!-- Rating Stars -->
                    <div class="rating-stars">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <span class="star">@Html.Raw(i <= item.RatingValue ? "&#9733;" : "&#9734;")</span>
                        }
                        <span style="color: var(--text-light); font-size: 0.85rem; margin-left: 0.5rem;">@item.RatingValue/5</span>
                    </div>

                    <!-- Restaurant Name -->
                    <div class="rating-restaurant">
                        <strong>Restaurant:</strong> @item.restaurant_name
                    </div>

                    <!-- Description -->
                    @if (!string.IsNullOrWhiteSpace(item.discription))
                    {
                        <div class="rating-description">
                            @item.discription
                        </div>
                    }

                    <!-- Action Buttons (hidden until hover) -->
                    <div class="action-buttons">
                        <button class="action-btn like" title="Like this review">
                            <i class="far fa-thumbs-up"></i> Helpful
                        </button>
                        @* <button class="action-btn reply" title="Reply to this review">
                            <i class="far fa-comment"></i> Reply
                        </button> *@
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="empty-state">
            <i class="far fa-comment-dots"></i>
            <p>No ratings available yet.</p>
        </div>
    }
</div>

<script>
    function timeAgo(dateString) {
        const now = new Date();
        const date = new Date(dateString);
        const seconds = Math.floor((now - date) / 1000);

        if (seconds < 60) return "just now";
        const minutes = Math.floor(seconds / 60);
        if (minutes < 60) return `${minutes} min ago`;
        const hours = Math.floor(minutes / 60);
        if (hours < 24) return `${hours} hour${hours > 1 ? "s" : ""} ago`;
        const days = Math.floor(hours / 24);
        if (days < 7) return `${days} day${days > 1 ? "s" : ""} ago`;
        const weeks = Math.floor(days / 7);
        if (weeks < 4) return `${weeks} week${weeks > 1 ? "s" : ""} ago`;
        const months = Math.floor(days / 30);
        if (months < 12) return `${months} month${months > 1 ? "s" : ""} ago`;
        const years = Math.floor(days / 365);
        return `${years} year${years > 1 ? "s" : ""} ago`;
    }

    document.addEventListener("DOMContentLoaded", function () {
        // Initialize time ago displays
        const elements = document.querySelectorAll(".relative-time");
        elements.forEach(el => {
            const date = el.getAttribute("data-date");
            el.textContent = timeAgo(date);
        });

        // Add interactive star hover effects
        const stars = document.querySelectorAll('.star');
        stars.forEach(star => {
            star.addEventListener('mouseover', function() {
                this.style.transform = 'scale(1.3)';
                this.style.transition = 'transform 0.2s ease';
            });
            star.addEventListener('mouseout', function() {
                this.style.transform = 'scale(1)';
            });
        });

        // Add like button functionality
        const likeButtons = document.querySelectorAll('.like');
        likeButtons.forEach(button => {
            button.addEventListener('click', function() {
                this.innerHTML = '<i class="fas fa-thumbs-up"></i> Thank you!';
                this.style.backgroundColor = '#4CAF50';
                setTimeout(() => {
                    this.innerHTML = '<i class="far fa-thumbs-up"></i> Helpful';
                    this.style.backgroundColor = '';
                }, 2000);
            });
        });

        // Add reply button functionality
        const replyButtons = document.querySelectorAll('.reply');
        replyButtons.forEach(button => {
            button.addEventListener('click', function() {
                const card = this.closest('.rating-card');
                const replyForm = document.createElement('div');
                replyForm.className = 'reply-form';
                replyForm.innerHTML = `
                    <textarea class="reply-textarea" placeholder="Write your reply..."></textarea>
                    <button class="action-btn submit-reply">Submit</button>
                    <button class="action-btn cancel-reply">Cancel</button>
                `;
                card.appendChild(replyForm);

                // Focus on textarea
                replyForm.querySelector('.reply-textarea').focus();

                // Handle cancel
                replyForm.querySelector('.cancel-reply').addEventListener('click', function() {
                    card.removeChild(replyForm);
                });
            });
        });
    });
</script>